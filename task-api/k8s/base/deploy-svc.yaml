---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-api
  namespace: svc-task
  labels: { app: task-api }
spec:
  replicas: 2
  revisionHistoryLimit: 3
  selector:
    matchLabels: { app: task-api }
  template:
    metadata:
      labels: { app: task-api }
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: task-api
      terminationGracePeriodSeconds: 20
      containers:
        - name: task-api
          # 镜像以 ECR digest 固定，来源于本仓库 task-api 项目的构建结果
          # 若更新 task-api 源码需重建并替换下方 digest
          image: 563149051155.dkr.ecr.us-east-1.amazonaws.com/task-api@sha256:d409d3f8925d75544f34edf9f0dbf8d772866b27609ef01826e1467fee52170a
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
          envFrom:
            - configMapRef:
                name: task-api-config
          # 资源水位：requests cpu=100m/mem=128Mi，limits cpu=500m/mem=512Mi
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          # 使用 Spring Boot Actuator 健康检查端点
          readinessProbe:
            httpGet: { path: /actuator/health/readiness, port: 8080 }
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet: { path: /actuator/health/liveness, port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: task-api
  namespace: svc-task
  labels: { app: task-api }
spec:
  type: ClusterIP
  selector: { app: task-api }
  ports:
    - name: http
      port: 8080
      targetPort: 8080
